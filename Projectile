[RequireComponent(typeof(Rigidbody))]
public class Projectile : MonoBehaviour
{
    [SerializeField] float speed;
    [SerializeField] float timeToLive;
    [SerializeField] float damage;

    Vector3 destination;
   //destroys the recently spawned bullet after the timetolive variable has run out
   void Start()
    {
        Destroy(gameObject, timeToLive);
    }

    //dictates where the bullet is going
    void Update()
    {
        if (IsDestinationReached())
        {
            Destroy(gameObject);
            return;
        }


        transform.Translate(Vector3.forward * speed * Time.deltaTime);

        if (destination != Vector3.zero)
            return;

        RaycastHit hit;
        if (Physics.Raycast(transform.position, transform.forward, out hit, 5f))
        {
            CheckDestructable(hit);
        }
    }

    //if it hits another object with the script Destructable attached to it, it will damage that objects health
    void CheckDestructable(RaycastHit hitinfo)
    {

        var destructable = hitinfo.transform.GetComponent<Destructable>();

        destination = hitinfo.point + hitinfo.normal * 0.0015f ;

        //Transform hole = (Transform)Instantiate(bulletHole, destination, Quaternion.LookRotation(hitinfo.normal) * Quaternion.Euler(0,180,0));
       // hole.SetParent(hitinfo.transform);
        if (destructable == null)
            return;

        destructable.TakeDamage(damage);
    }

    bool IsDestinationReached()
    {
        if (destination == Vector3.zero)
            return false;
        Vector3 directionToDestination = destination - transform.position;
        float dot = Vector3.Dot(directionToDestination, transform.forward);
        if (dot < 0)
            return true;

        return false;
    }

}
