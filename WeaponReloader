using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class WeaponReloader : MonoBehaviour
{
    [SerializeField] int maxAmmo;
    [SerializeField] float reloadTime;
    [SerializeField] int clipSize;
    [SerializeField] Container inventory;
    [SerializeField] EWeaponType weaponType;

    public int shotsFiredInClip;
    bool isReloading;
    System.Guid containerItemId;

    public event System.Action OnAmmoChanged;

    //this checks how many bullets are left in the current clip and returns that amount negating the bullets fired
    public int RoundsRemainingInClip
    {
        get
        {
            return clipSize - shotsFiredInClip;
        }
    }

    public int RoundsRemainingInInventory
    {
        get
        {
            return inventory.GetAmountRemaining(containerItemId);
        }
    }

    //this returns the value if whether the player is reloading or not
    public bool IsReloading
    {
        get
        {
            return isReloading;
        }
    }

    void Awake()
    {
        inventory.OnContainerReady += () => { containerItemId = inventory.Add(weaponType.ToString(), maxAmmo); };
    }

    //this will reload the players gun and returns the isReloading value as true
    public void Reload()
    {
        if (isReloading)
            return;

        isReloading = true;
        print("Reload started!");
        GameManager.Instance.Timer.Add(() => { ExecuteReload(inventory.TakeFromContainer(containerItemId, clipSize - RoundsRemainingInClip)); },reloadTime);
    }

    //this takes away the shots remaining in the clip from the ammo counter and sets the current shotsfired as zero
    private void ExecuteReload(int amount)
    {
        isReloading = false;
        shotsFiredInClip -= amount;
        HandleOnAmmoChanged();
    }
    public void TakeFromClip(int amount)
    {
        shotsFiredInClip += amount;
        HandleOnAmmoChanged();
    }

    public void HandleOnAmmoChanged()
    {
        if (OnAmmoChanged != null)
            OnAmmoChanged();
    }
}
